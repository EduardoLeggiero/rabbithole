## This file is part of Rabbit Hole.

##     Rabbit Hole is free software: you can redistribute it and/or modify
##     it under the terms of the GNU General Public License as published by
##     the Free Software Foundation, either version 3 of the License, or
##     (at your option) any later version.

##     Rabbit Hole is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##     GNU General Public License for more details.

##     You should have received a copy of the GNU General Public License
##     along with Rabbit Hole.  If not, see <http://www.gnu.org/licenses/>.
#!/usr/bin/env python
# -*- coding: iso-8859-15 -*-
# generated by wxGlade HG on Fri May 27 21:43:42 2011

import wx
from ObjectListView import ObjectListView,ColumnDefn
from utils import formatSize
import transmissionrpc
import os
from bencode import bdecode as decode
from base64 import b64encode

class File(object):

    def __init__(self, name,size,id):
        self.name = name
        self.size = size
        self.id = id
    
class AddTorrentDialog(wx.Dialog):
    def __init__(self,*args, **kwds):
        # begin wxGlade: AddTorrentDialog.__init__
        kwds["style"] = wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.label_1 = wx.StaticText(self, -1, "Destination folder")
        self.download_dir = wx.TextCtrl(self, -1, "",size=(450,-1))
        self.started = wx.CheckBox(self, -1, "Start it right away")
        self.SelAll = wx.Button(self, -1, "Select All")
        self.DeselAll = wx.Button(self, -1, "Deselect All")
        self.Wanted = ObjectListView(self, -1, style=wx.LC_REPORT|wx.SUNKEN_BORDER)
        self.ok = wx.Button(self, -1, "Start it!")
        self.cancel = wx.Button(self, -1, "Go back!")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_BUTTON, self.SelectAll, self.SelAll)
        self.Bind(wx.EVT_BUTTON, self.DeselectAll, self.DeselAll)
        self.Bind(wx.EVT_BUTTON, self.EvtOk, self.ok)
        self.Bind(wx.EVT_BUTTON, self.EvtCancel, self.cancel)
        #end wxGlade
        
    def __set_properties(self):
        # begin wxGlade: AddTorrentDialog.__set_properties
        self.SetTitle("Add New Torrent")
        self.Wanted.SetMinSize((600,300))
        self.ok.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AddTorrentDialog.__do_layout
        grid_sizer_1 = wx.FlexGridSizer(3, 3, 5, 5)
        grid_sizer_2 = wx.GridSizer(1, 2, 5, 5)
        grid_sizer_3 = wx.FlexGridSizer(3, 3, 6, 6)
        grid_sizer_3.AddGrowableCol(1)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_3.Add((20, 20), 0, 0, 0)
        grid_sizer_3.Add((20, 20), 0, 0, 0)
        grid_sizer_3.Add((20, 20), 0, 0, 0)
        grid_sizer_3.Add(self.label_1, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.download_dir, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.started, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.SelAll, 0, 0, 0)
        grid_sizer_3.Add(self.DeselAll, 0,0, 0)
        grid_sizer_3.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.Wanted, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 50), 0, 0, 0)
        grid_sizer_2.Add(self.ok, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.cancel, 0, wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND|wx.ALIGN_CENTER_HORIZONTAL|wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 50), 0, 0, 0)
        self.SetSizer(grid_sizer_1)
        grid_sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def SetData(self,data):
        #init Panel Data
        self.download_dir.SetValue(self.Parent.tc.get_session().download_dir)
        self.started.SetValue(self.Parent.tc.get_session().start_added_torrents)
        
        metainfo = decode(data)
        self.__torrentData = b64encode(data)
        self.Wanted.SetColumns([ColumnDefn("File Name","left",500,"name"),
                                ColumnDefn("Size","size",80,"size",stringConverter=formatSize)])
        self.Wanted.InstallCheckStateColumn(self.Wanted.GetPrimaryColumn())
        
        index = 0
        if 'files' in metainfo['info']:
            for i in metainfo['info']['files']:#torrent basic decoding
                path = ''
                for item in i['path']:
                    path +=item + '\\'
                path = path.rstrip('\\')
                self.Wanted.AddObject( File(path.decode('ascii','ignore'),i['length'],index) )
                index+=1
        elif 'length' in metainfo['info']:
            name = metainfo['info']['name'].decode('ascii','ignore')
            self.Wanted.AddObject(File(name,metainfo['info']['length'],0) )
        self.SelectAll(wx.Event)
        
    def EvtOk(self, event): # wxGlade: AddTorrentDialog.<event_handler>
        unwanted = range(0,len(self.Wanted.GetObjects())) #Workaround to make transmissionrpc work
        for file in self.Wanted.GetCheckedObjects():
            unwanted.remove(file.id)
        try:           
            self.Parent.tc.add(self.__torrentData,
                         files_unwanted=unwanted,
                         paused = not self.started.IsChecked(),
                         download_dir = self.download_dir.GetValue() )
        except transmissionrpc.TransmissionError,original:
            self.Parent.ReportError("Can't Add New Torrent:"+str(original))

        self.EndModal(wx.ID_OK)
        
    def EvtCancel(self, event): # wxGlade: AddTorrentDialog.<event_handler>
        self.EndModal(wx.ID_CANCEL)

    def SelectAll(self, event): # wxGlade: AddTorrentDialog.<event_handler>
        for object in self.Wanted.GetObjects():
            self.Wanted.SetCheckState(object,True)
            self.Wanted.RefreshObject(object)

    def DeselectAll(self, event): # wxGlade: AddTorrentDialog.<event_handler>
        for object in self.Wanted.GetObjects():
            self.Wanted.SetCheckState(object,False)
            self.Wanted.RefreshObject(object)

# end of class AddTorrentDialog
