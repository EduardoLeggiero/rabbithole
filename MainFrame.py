## This file is part of Rabbit Hole.

##     Rabbit Hole is free software: you can redistribute it and/or modify
##     it under the terms of the GNU General Public License as published by
##     the Free Software Foundation, either version 3 of the License, or
##     (at your option) any later version.

##     Rabbit Hole is distributed in the hope that it will be useful,
##     but WITHOUT ANY WARRANTY; without even the implied warranty of
##     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
##     GNU General Public License for more details.

##     You should have received a copy of the GNU General Public License
##     along with Rabbit Hole.  If not, see <http://www.gnu.org/licenses/>.
# -*- coding: us-ascii -*-
# generated by wxGlade 300a4438fc64 on Wed Mar 14 10:28:15 2012

import wx
from SearchPanel import SearchPanel
import os
import json
from search import *
from request import doRequest
from PrefDialog import PrefDialog
import webbrowser
from threading import activeCount
from AboutDialog import AboutDialog
from AddNewTorrentDialog import *
import transmissionrpc
from crawler import crawler
# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade
DEBUG = False

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        
        # Tool Bar
        self.toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL | wx.TB_TEXT)
        self.SetToolBar(self.toolbar)
        self.toolbar.AddLabelTool(101, "Save Torrent", wx.Bitmap("images/disk.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Save Torrent", "Save Torrent on disk")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(102, "Send Link", wx.Bitmap("images/browser.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Send link to browser", "Send torrent link to browser")
        self.toolbar.AddLabelTool(103, "Send Magnet", wx.Bitmap("images/magnet.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Send magnet to browser", "Send magnet link to browser")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(107, "Send Link", wx.Bitmap("images/transmLink.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Send Link to transmission", "Send Link to transmission")
        self.toolbar.AddLabelTool(106, "Send Magnet", wx.Bitmap("images/transmMag.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Send Magnet to transmission", "Send Magnet to transmission")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(110, "Copy Url", wx.Bitmap("images/copyurl2clipboard.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Copy Url", "Copy Url to clipboard")
        self.toolbar.AddLabelTool(109, "Copy Magnet", wx.Bitmap("images/copymagnet2clipboard.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Copy Magnet Url", "Copy Magnet Url to clipboard")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(105, "Settings", wx.Bitmap("images/settings.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Settings", "Settings")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(108, "About", wx.Bitmap("images/about.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "About", "About")
        self.toolbar.AddSeparator()
        self.toolbar.AddLabelTool(104, "Quit", wx.Bitmap("images/quit.png", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Quit", "Quit")
        # Tool Bar end
        self.MainPanel = wx.Panel(self, -1)
        self.Text_Query = wx.TextCtrl(self.MainPanel, -1, "")
        self.Button_Search = wx.Button(self.MainPanel, -1, "Search")
        self.Button_SuperSearch = wx.Button(self.MainPanel, -1, "Super Search")
        self.Button_SuperSearch_SingleTab = wx.Button(self.MainPanel, -1, "Super Search (Single tab)")
        self.Text_Plugin = wx.StaticText(self.MainPanel, -1, "Plugin:")
        self.Choice_Plugin = wx.Choice(self.MainPanel, -1, choices=[])
        self.label_2 = wx.StaticText(self.MainPanel, -1, "Category:")
        self.Choice_Category = wx.Choice(self.MainPanel, -1, choices=[])
        self.Button_DeleteTab = wx.Button(self.MainPanel, -1, "Delete Tab")
        self.Button_DeleteAllTabs = wx.Button(self.MainPanel, -1, "Delete All Tabs")
        self.SearchNotebook = wx.Notebook(self.MainPanel, -1, style=0)
        self.Text_Status = wx.StaticText(self.MainPanel, -1, "Status: Idle")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.Toolbar_SaveAs, id=101)
        self.Bind(wx.EVT_TOOL, self.Toolbar_SendLink, id=102)
        self.Bind(wx.EVT_TOOL, self.Toolbar_SendMagnet, id=103)
        self.Bind(wx.EVT_TOOL, self.Toolbar_TransmUrl, id=107)
        self.Bind(wx.EVT_TOOL, self.Toolbar_TransmMagneturl, id=106)
        self.Bind(wx.EVT_TOOL, self.copyurl2clipboard, id=110)
        self.Bind(wx.EVT_TOOL, self.copymagnet2clipboard, id=109)
        self.Bind(wx.EVT_TOOL, self.Toolbar_Settings, id=105)
        self.Bind(wx.EVT_TOOL, self.Toolbar_About, id=108)
        self.Bind(wx.EVT_TOOL, self.Toolbar_Quit, id=104)
        self.Bind(wx.EVT_BUTTON, self.ButtonSearch, self.Button_Search)
        self.Bind(wx.EVT_BUTTON, self.ButtonSuperSearch, self.Button_SuperSearch)
        self.Bind(wx.EVT_BUTTON, self.ButtonSuperSearchSingleTab, self.Button_SuperSearch_SingleTab)
        self.Bind(wx.EVT_CHOICE, self.SetPlugin, self.Choice_Plugin)
        self.Bind(wx.EVT_BUTTON, self.DeleteTab, self.Button_DeleteTab)
        self.Bind(wx.EVT_BUTTON, self.DeleteAllTabs, self.Button_DeleteAllTabs)
        # end wxGlade
        pub.subscribe(self.SearchFinished,"Search completed")
        pub.subscribe(self.SetStatus,"status")
        pub.subscribe(self.ReportError,"error")

        self.tc=None
        self.Button_Search.SetDefault()
        #Read Plugins
        self.plugin = None
        try:
            plugins = os.listdir('plugins')
            for plugin in plugins:
                if plugin.endswith('.json'):
                    self.Choice_Plugin.Append(plugin.replace('.json',''))
        except StandardError,msg:
            self.ReportError("Can\'t open plugin folder. Reason:"+str(msg))

        try:
            
            if not os.path.exists(os.path.expanduser('~/.rabbithole')):
                os.mkdir(os.path.expanduser('~/.rabbithole'))
            if not os.path.exists(os.path.expanduser('~/.rabbithole') + '/config.json'):
                self.config_path = os.path.expanduser('~/.rabbithole')
                default_config_file = open('config/config.json','r')
                self.WriteConfig(json.loads(default_config_file.read()))
                default_config_file.close()
            self.config_path = os.path.expanduser('~/.rabbithole')
                
        except StandardError,msg:
            self.ReportError('Sorry, can\'t write default configuration file in home folder. Reason:' + str(msg))
        
        #Update configuration file 
        try:
            local_config = self.ReadConfig()
            default_config_file = open('config/config.json','r')
            def_config = json.loads(default_config_file.read())
            default_config_file.close()
            for key in def_config.keys():
                if not (key in local_config):
                    local_config[key] = def_config[key]
            for key in local_config.keys():
                if not (key in def_config):
                    local_config.pop(key)

            self.WriteConfig(local_config)
        except StandardError,msg:
            self.ReportError('Sorry, can\'t update configuration file in home folder. Reason:' + str(msg))

        self.Choice_Plugin.SetSelection(self.Choice_Plugin.Items.index(self.ReadConfig()['default']))
        self.SetPluginReal()
            
    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("Rabbit Hole")
        self.toolbar.Realize()
        self.SearchNotebook.SetMinSize((800, 500))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_2_copy = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.FlexGridSizer(5, 3, 10, 5)
        grid_sizer_3 = wx.GridSizer(1, 6, 0, 0)
        grid_sizer_2 = wx.FlexGridSizer(1, 4, 5, 5)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_2.Add(self.Text_Query, 0, wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.Button_Search, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.Button_SuperSearch, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.Add(self.Button_SuperSearch_SingleTab, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_2.AddGrowableCol(0)
        grid_sizer_1.Add(grid_sizer_2, 1, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_3.Add(self.Text_Plugin, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Choice_Plugin, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.label_2, 0, wx.ALIGN_RIGHT | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Choice_Category, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Button_DeleteTab, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_3.Add(self.Button_DeleteAllTabs, 0, wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.SearchNotebook, 1, wx.EXPAND, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.Add(self.Text_Status, 0, wx.ALIGN_CENTER_VERTICAL, 0)
        grid_sizer_1.Add((20, 20), 0, 0, 0)
        grid_sizer_1.AddGrowableRow(3)
        grid_sizer_1.AddGrowableCol(1)
        sizer_2_copy.Add(grid_sizer_1, 1, wx.EXPAND, 0)
        self.MainPanel.SetSizer(sizer_2_copy)
        sizer_2.Add(self.MainPanel, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_2)
        sizer_2.Fit(self)
        self.Layout()
        # end wxGlade


    def Toolbar_SendLink(self, event):  # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject() 
            if selected and selected.url:
                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()
                config = self.ReadConfig()
                if 'crawler' in plugin['url_filter']:

                    try:
                        url = crawler(selected.url,plugin['url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                
                else:
                    url = selected.url
                    
                try:
                    webbrowser.open(url)
                except StandardError,msg:
                    self.ReportError('Sorry, can\'t send link to web browser. Reason:' + str(msg))
            else:
                self.ReportInfo("Plugin didn't fetch any URL or no item is selected")
        else:
            self.ReportInfo("No page selected")

    def Toolbar_SendMagnet(self, event):  # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject()
            if selected and selected.magneturl:
                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()

                if 'crawler' in plugin['magnet_url_filter']:
                    config = self.ReadConfig()
                    try:
                        magneturl = crawler(selected.magneturl,plugin['magnet_url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                else:
                    magneturl = selected.magneturl
                try:
                    webbrowser.open(magneturl)
                except StandardError,msg:
                    self.ReportError('Sorry, can\'t send magnet link to web browser. Reason:' + str(msg))
            else:
                self.ReportInfo("Plugin didn't fetch any magnet URL or no item is selected")
        else:
            self.ReportInfo("No page selected")

    def ButtonSearch(self, event):  # wxGlade: MainFrame.<event_handler>
            
        if self.Choice_Plugin.GetSelection() >= 0:
            
            query = self.Text_Query.GetValue()
            plugin_name = self.Choice_Plugin.Items[self.Choice_Plugin.GetSelection()]
            category = self.plugin['categories'][self.Choice_Category.Items[self.Choice_Category.GetSelection()]]
            config = self.ReadConfig()
            SearchThread(query,category,plugin_name,[plugin_name],config['pages'],config['timeout'])
            self.Button_Search.Disable()
        else:
            self.ReportInfo("Please select a plugin")

    def ButtonSuperSearch(self, event):  # wxGlade: MainFrame.<event_handler>
          
        try: 
            plug_dir = os.listdir('plugins')
        except StandardError,msg:
            self.ReportError("Sorry, can\'t access plugin directory. Reason:" + str(msg))

        config = self.ReadConfig()

        query = self.Text_Query.GetValue()
        self.Button_SuperSearch.Disable()

        for plug in plug_dir:
            if plug.endswith('.json'):
                plugin_name = plug.replace('.json','')
                if plugin_name in config['DisabledPlugins']:
                    continue
                 
                SearchThread(query,None,plugin_name,[plugin_name],config['pages'],config['timeout'])


    def ButtonSuperSearchSingleTab(self, event):  # wxGlade: MainFrame.<event_handler>
        
        try: 
            plug_dir = os.listdir('plugins')
        except StandardError,msg:
            self.ReportError("Sorry, can\'t access plugin directory. Reason:" + str(msg))

        plugins = []

        config = self.ReadConfig()

        query = self.Text_Query.GetValue()
        self.Button_SuperSearch.Disable()
        self.Button_SuperSearch_SingleTab.Disable()

        for plug in plug_dir:
            if plug.endswith('.json'):
                plugin_name = plug.replace('.json','')
                if plugin_name in config['DisabledPlugins']:
                    continue
                plugins.append(plugin_name)

        SearchThread(query,None,'Aggregate',plugins,config['pages'],config['timeout'])##Devo risolvere il problema della category
                
    def SearchFinished(self,data,query,plugin):
        self.SearchNotebook.AddPage(SearchPanel(self.SearchNotebook),query + ' (' + plugin + ')',select=True )
        self.SearchNotebook.GetCurrentPage().torrList.SetObjects(data)
        
        self.Button_Search.Enable()
        self.Button_SuperSearch_SingleTab.Enable()

        if activeCount() == 1:
            self.Button_SuperSearch.Enable()
            self.SetStatus("Status: Idle")

    def SetStatus(self,status):
        self.Text_Status.SetLabel(status)

    def SetPlugin(self, event):  # wxGlade: MainFrame.<event_handler>
        self.SetPluginReal()
        
    def SetPluginReal(self):
        index = self.Choice_Plugin.GetSelection()
        plugin_name = self.Choice_Plugin.Items[index]
        plugin_file = open( 'plugins/' + plugin_name + '.json','r')
        self.plugin = json.loads(plugin_file.read())
        plugin_file.close()
        if DEBUG:
            print sorted(self.plugin['categories'].keys())
        self.Choice_Category.SetItems(sorted(self.plugin['categories'].keys()))
        self.Choice_Category.SetSelection(0)

    def DeleteAllTabs(self, event):  # wxGlade: MainFrame.<event_handler>
        self.SearchNotebook.DeleteAllPages()

    def DeleteTab(self, event):  # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetSelection()
        if page > -1 :
            self.SearchNotebook.DeletePage(page)

    def Toolbar_Quit(self, event):  # wxGlade: MainFrame.<event_handler>
        self.Destroy()

    def Toolbar_SaveAs(self, event): # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject() 
            if selected and selected.url:

                if DEBUG:
                    print "Downloading :" + str(selected.url)
                    
                config = self.ReadConfig()
                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()

                if 'crawler' in plugin['url_filter']:
                    config = self.ReadConfig()
                    try:
                        url = crawler(selected.url,plugin['url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                else:
                    url = selected.url

                savefile = wx.FileDialog(self, "Save File as...", "", selected.name.replace("[U]","").replace("[M]","").lstrip(), "Torrent file (*.torrent)|*.torrent", wx.FD_SAVE)
                if savefile.ShowModal() == wx.ID_OK:
                    name = savefile.GetFilename()
                    directory = savefile.GetDirectory()
                    local_path = os.path.join(directory,name)
                    if not local_path.endswith('.torrent'):
                        local_path += '.torrent'
                    try:
                        scribenda = doRrequest(url,plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t download the torrent. Reason:"+str(msg))
                        return
                    try:
                        LocalFile = open(local_path,'w')
                        LocalFile.write(scribenda.read())
                        LocalFile.close()
                    except StandardError,msg:
                        self.ReportError("Can\'t write torrent on disk. Reason:"+str(msg))

            else:
                self.ReportInfo("Plugin didn't fetch any URL")
        else:
            self.ReportInfo("There's no page")

    def Toolbar_Settings(self, event): # wxGlade: MainFrame.<event_handler>
        PrefDialog(self).ShowModal() 
 
 
    def Toolbar_About(self, event): # wxGlade: MainFrame.<event_handler>
        AboutDialog(self).ShowModal()

    def Toolbar_TransmUrl(self, event): # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject() 
            if selected and selected.url:
                config = self.ReadConfig()
                data = config['transmission']
                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()

                if 'crawler' in plugin['url_filter']:
                    config = self.ReadConfig()
                    try:
                        url = crawler(selected.url,plugin['url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                else:
                    url = selected.url

                if not self.tc:
                    try:
                        self.tc = transmissionrpc.Client(address=data['host'],port=data['port'],user=data['user'],password=data['pass'])
                    except transmissionrpc.TransmissionError,original:
                        msg = "Can\'t connect to Transmission client:" + str(original)
                        self.ReportError(msg)
                        return -1
                try:
                    data = doRequest(url,plugin['headers'],config['timeout'])
                    self.NewTorr(data.read())
                except StandardError,msg:
                    self.ReportError('Can\'t download torrent from site. Reason:' + str(msg))

            else:
                self.ReportInfo("Plugin didn't fetch any URL")
        else:
            self.ReportInfo("There's no page")
            
    def Toolbar_TransmMagneturl(self, event): # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject() 
            if selected and selected.magneturl:
                config = self.ReadConfig()
                data = config['transmission']

                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()

                if 'crawler' in plugin['magnet_url_filter']:
                    config = self.ReadConfig()
                    try:
                        magneturl = crawler(selected.magneturl,plugin['magnet_url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                else:
                    magneturl = selected.magneturl

                if not self.tc:
                    try:
                        self.tc = transmissionrpc.Client(address=data['host'],port=data['port'],user=data['user'],password=data['pass'])
                    except transmissionrpc.TransmissionError,original:
                        msg = "Can\'t connect to Transmission client:" + str(original)
                        self.ReportError(msg)
                        return -1
                try:
                    self.tc.add_uri(magneturl)
                    self.ReportInfo(str('Magnet URL successfully sent to Transmission!'))
                except transmissionrpc.TransmissionError,original:
                    msg = "Can\'t add magnet to Transmission:" + str(original)
                    self.ReportError(msg)
            else:
                self.ReportInfo("Plugin didn't fetch any magnet URL")
        else:
            self.ReportInfo("There's no page")
 
            
    def NewTorr(self,torrentBuffer):
        ATD = AddTorrentDialog(self)
        ATD.SetData(torrentBuffer)
        ATD.ShowModal()
        ATD.Destroy()
           
    def WriteConfig(self,config):
        try:
            configFile = open(self.config_path + '/config.json','w')
            configFile.write(json.dumps(config))
            configFile.close()
        except StandardError,msg:
            self.ReportError('Sorry, can\'t save configuration file. Reason:'+ str(msg))
    
    def ReadConfig(self):
        try:
            configFile = open(self.config_path + '/config.json','r')
            return json.loads(configFile.read())
        except StandardError,msg:
            self.ReportError('Sorry, can\'t read configuration file. Reason:'+ str(msg))
            
    def copyurl2clipboard(self, event):  # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject() 
            if selected and selected.url:
                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()

                if 'crawler' in plugin['url_filter']:
                    config = self.ReadConfig()
                    try:
                        url = crawler(selected.url,plugin['url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                else:
                    url = selected.url

                dataObj = wx.TextDataObject()
                dataObj.SetText(url)
                if wx.TheClipboard.Open():
                    wx.TheClipboard.SetData(dataObj)
                    wx.TheClipboard.Close()
                    self.ReportInfo("Torrent's Url has been copied to the clipboard.")
                else:
                    self.ReportError("Unable to open the clipboard")
            else:
                self.ReportInfo("Plugin didn't fetch any URL")
        else:
            self.ReportInfo("There's no page")
        	

    def copymagnet2clipboard(self, event):  # wxGlade: MainFrame.<event_handler>
        page = self.SearchNotebook.GetCurrentPage()
        if page:
            selected = page.torrList.GetSelectedObject() 
            if selected and selected.magneturl:
                plugin_file = open('plugins/'+ selected.plugin + '.json','r')
                plugin = json.loads(plugin_file.read())
                plugin_file.close()
                    
                if 'crawler' in plugin['magnet_url_filter']:
                    config = self.ReadConfig()
                    try:
                        magneturl = crawler(selected.magneturl,plugin['magnet_url_filter']['crawler'],plugin['headers'],config['timeout'])
                    except StandardError,msg:
                        self.ReportError("Can\'t establish a connection. Reason:"+str(msg))
                        return
                else:
                    magneturl = selected.magneturl

                dataObj = wx.TextDataObject()
                dataObj.SetText(magneturl)
                if wx.TheClipboard.Open():
                    wx.TheClipboard.SetData(dataObj)
                    wx.TheClipboard.Close()
                    self.ReportInfo("Torrent's Magnet Url has been copied to the clipboard.")
                else:
                    self.ReportError("Unable to open the clipboard")
            else:
                self.ReportInfo("Plugin didn't fetch any magnet URL")
        else:
            self.ReportInfo("There's no page")
            
    def ReportError(self, msg):
        wx.MessageBox(msg,
                      "Error", wx.OK |
                      wx.ICON_ERROR) 

    def ReportInfo(self,msg):
       wx.MessageBox(msg,"Aloha!", wx.OK | wx.ICON_INFORMATION) 



        # end of class MainFrame
